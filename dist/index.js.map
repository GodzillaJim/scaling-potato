{"version":3,"file":"index.js","mappings":"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","sources":["webpack://collaborator/./src/app.ts","webpack://collaborator/./src/config/config.ts","webpack://collaborator/./src/config/index.ts","webpack://collaborator/./src/config/logger.config.ts","webpack://collaborator/./src/config/mongodb.config.ts","webpack://collaborator/./src/controllers/auth/index.ts","webpack://collaborator/./src/controllers/contact/index.ts","webpack://collaborator/./src/controllers/user/index.ts","webpack://collaborator/./src/errors/index.ts","webpack://collaborator/./src/index.ts","webpack://collaborator/./src/middleware/auth/index.ts","webpack://collaborator/./src/middleware/limiters.ts","webpack://collaborator/./src/models/index.ts","webpack://collaborator/./src/models/roles/index.ts","webpack://collaborator/./src/models/users/index.ts","webpack://collaborator/./src/routes/auth/index.ts","webpack://collaborator/./src/routes/guest/index.ts","webpack://collaborator/./src/routes/index.ts","webpack://collaborator/./src/routes/user/index.ts","webpack://collaborator/./src/seed/index.ts","webpack://collaborator/./src/services/UserService/index.ts","webpack://collaborator/./src/services/auth/accounts/index.ts","webpack://collaborator/./src/services/auth/tools/index.ts","webpack://collaborator/./src/services/contact/index.ts","webpack://collaborator/./src/services/kafka/index.ts","webpack://collaborator/./src/tools/kafka/index.ts","webpack://collaborator/./src/tools/validators/index.ts","webpack://collaborator/./src/types/dto/contact/ContactForm.ts","webpack://collaborator/./src/types/dto/login/index.ts","webpack://collaborator/./src/types/dto/registration/index.ts","webpack://collaborator/./src/types/index.ts","webpack://collaborator/external commonjs \"@faker-js/faker\"","webpack://collaborator/external commonjs \"autobind-decorator\"","webpack://collaborator/external commonjs \"class-transformer\"","webpack://collaborator/external commonjs \"class-validator\"","webpack://collaborator/external commonjs \"cors\"","webpack://collaborator/external commonjs \"dotenv\"","webpack://collaborator/external commonjs \"express\"","webpack://collaborator/external commonjs \"express-rate-limit\"","webpack://collaborator/external commonjs \"helmet\"","webpack://collaborator/external commonjs \"http-errors\"","webpack://collaborator/external commonjs \"jsonwebtoken\"","webpack://collaborator/external commonjs \"kafkajs\"","webpack://collaborator/external commonjs \"lodash\"","webpack://collaborator/external commonjs \"mongoose\"","webpack://collaborator/external commonjs \"morgan\"","webpack://collaborator/external commonjs \"winston\"","webpack://collaborator/external node-commonjs \"crypto\"","webpack://collaborator/external node-commonjs \"http2\"","webpack://collaborator/webpack/bootstrap","webpack://collaborator/webpack/startup"],"sourcesContent":["import cors from \"cors\";\nimport dotenv from \"dotenv\";\nimport express from \"express\";\nimport helmet from \"helmet\";\nimport morgan from \"morgan\";\nimport { corsOptionsWhiteList, morganConfig } from \"./config/config\";\nimport router from \"./routes\";\n\ndotenv.config();\n\nconst app = express();\n\nconst middleware = [\n  morgan(morganConfig),\n  helmet(),\n  cors(corsOptionsWhiteList),\n  express.json(),\n  express.urlencoded({ extended: false }),\n];\n\napp.use(middleware);\n\napp.use(\"/api/v1\", router);\n\nexport default app;\n","import { CorsOptions } from \"cors\";\nimport { Request, Response } from \"express\";\nimport logger from \"./logger.config\";\n\n/* Cors Config  */\nconst corsOptions: CorsOptions = {\n  allowedHeaders: [\n    \"Origin\",\n    \"X-Requested-With\",\n    \"Content-Type\",\n    \"Accept\",\n    \"X-Access-Token\",\n    \"Authorization\",\n  ],\n  credentials: true,\n  methods: \"GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE\",\n  preflightContinue: false,\n};\n\nexport const corsOptionsWhiteList = (request: Request, callback: Function) => {\n  const whiteList = [\"localhost:4200\", \"localhost:3000\", \"localhost:5000\"];\n  const origin = request.header(\"origin\")\n    ? request.header(\"origin\")\n    : request.header(\"host\");\n  if (origin && whiteList.some((host: string) => origin.includes(host))) {\n    corsOptions.origin = true;\n    callback(null, corsOptions);\n    return;\n  }\n  corsOptions.origin = false;\n  callback(new Error(`Origin not allowed by CORS: ${origin}`), corsOptions);\n};\n\nexport const morganConfig = (tokens: any, req: Request, res: Response) => {\n  const log = [\n    tokens.method(req, res),\n    tokens.url(req, res),\n    \"-\",\n    \"statusCode:\",\n    tokens.status(req, res),\n    \"-\",\n    \"response-size:\",\n    tokens.res(req, res, \"content-length\"),\n    \"-\",\n    \"response-time:\",\n    tokens[\"response-time\"](req, res),\n    \"ms\",\n  ].join(\" \");\n  logger.info(log);\n  return log;\n};\n","import dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport default {\n  mailer: {\n    host: process.env.MAIL_HOST,\n    port: parseInt(process.env.MAIL_PORT, 10),\n    auth: {\n      user: process.env.MAIL_USERNAME,\n      pass: process.env.MAIL_PASSWORD,\n    },\n  },\n  kafka: {\n    bootstrapServerHost: process.env.KAFKA_BOOTSTRAP_SERVER || \"localhost:9092\",\n    port: process.env.KAFKA_PORT || 9092,\n    clientId: process.env.KAFKA_CLIENT_ID,\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET || \"SECRET\",\n    expiration: process.env.JWT_EXPIRATION || 3000,\n  },\n};\n","import { createLogger, format, transports } from \"winston\";\n\nconst logger = createLogger({\n  level: \"info\",\n  format: format.combine(\n    format.simple(),\n    format.timestamp(),\n    format.printf(\n      (info: any) => `[${info.timestamp}] ${info.level}: ${info.message}`\n    )\n  ),\n  defaultMeta: { service: \"user-service\" },\n  transports: [\n    new transports.File({\n      filename: \"./logs/error.log\",\n      level: \"error\",\n    }),\n    new transports.File({\n      filename: \"./logs/info.log\",\n      level: \"info\",\n    }),\n  ],\n});\n\nexport default logger;\n","import { config } from \"dotenv\";\r\nimport logger from \"./logger.config\";\r\nimport mongoose from \"mongoose\";\r\n\r\nexport default class MongoDb {\r\n  constructor() {\r\n    config();\r\n  }\r\n  connect() {\r\n    mongoose\r\n      .connect(process.env.MONGO_DB, {\r\n        servername: \"COLLABOR@TOR\",\r\n      })\r\n      .then(() => {\r\n        logger.info(\"MongoDb connected\");\r\n      })\r\n      .catch((error) => {\r\n        logger.error(error);\r\n      });\r\n  }\r\n}\r\n","import { NextFunction, Request, Response } from \"express\";\n\nimport { boundClass } from \"autobind-decorator\";\nimport NewAccount from \"../../types/dto/registration\";\nimport Account from \"../../services/auth/accounts\";\nimport Login from \"../../types/dto/login\";\n\n@boundClass\nexport default class AuthController {\n  accountService: Account;\n\n  constructor() {\n    this.accountService = new Account();\n  }\n\n  public async registerNewUser(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const newUser: NewAccount = req.body;\n      await this.accountService.registerNewAccount(newUser);\n      res.status(200).json({ success: true, data: \"Check email to continue\" });\n    } catch (e) {\n      next(e);\n    }\n  }\n\n  public async loginUser(req: Request, res: Response, next: NextFunction) {\n    try {\n      const user: Login = req.body;\n      const tokenInfo = await this.accountService.loginUser(user);\n      res.status(200).json(tokenInfo);\n    } catch (e) {\n      next(e);\n    }\n  }\n}\n","import { boundClass } from \"autobind-decorator\";\nimport { NextFunction, Request, Response } from \"express\";\nimport logger from \"../../config/logger.config\";\nimport ContactFormService from \"../../services/contact\";\n\n@boundClass\nexport default class ContactFormController {\n  name: string;\n\n  contactService: ContactFormService;\n\n  constructor() {\n    this.name = \"Contact-Form-Controller\";\n    this.contactService = new ContactFormService();\n  }\n\n  public async sendContactFormSubmission(\n    req: Request,\n    _res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const form = req.body;\n      await this.contactService.submitContactForm(form);\n      logger.info(form);\n    } catch (e) {\n      logger.error(e);\n      next(e);\n    }\n  }\n}\n","import { Request, Response } from \"express\";\nimport UserService from \"../../services/UserService\";\nimport createErrorResponse from \"../../errors\";\n\nexport default class UserController {\n  public static async getUsers(_req: Request, res: Response) {\n    try {\n      const users = await UserService.getAllUsers();\n      return res.json(users);\n    } catch (e) {\n      return res.json(createErrorResponse(e));\n    }\n  }\n}\n","import createHttpError from \"http-errors\";\n\nconst createErrorResponse = (error: any, status: number = 500) => {\n  switch (status) {\n    case 404:\n      return new createHttpError.NotFound(error.message);\n    case 400:\n      return new createHttpError.BadRequest(error.message);\n    case 401:\n      return new createHttpError.Unauthorized(error.message);\n    case 403:\n      return new createHttpError.Forbidden(error.message);\n    default:\n      return {\n        error: {\n          statusCode: status,\n          message: error.message,\n        },\n      };\n  }\n};\nexport default createErrorResponse;\n","import { config } from \"dotenv\";\nimport logger from \"winston\";\nimport MongoDb from \"./config/mongodb.config\";\nimport app from \"./app\";\nimport { seedAdmin, seedRoles } from \"./seed\";\n\nconfig();\nconst port = process.env.PORT || 3000;\nconst mongodb = new MongoDb();\nmongodb.connect();\n\napp.listen(port, async () => {\n  logger.info(`connected to port ${port}`);\n  console.log(`connected to port ${port}`);\n  await seedRoles();\n  await seedAdmin();\n});\n","import { NextFunction, Response, Request } from \"express\";\nimport { isEmpty } from \"lodash\";\nimport { constants } from \"http2\";\nimport AuthService from \"../../services/auth/tools\";\nimport { Role } from \"../../types\";\nimport logger from \"../../config/logger.config\";\nimport createErrorResponse from \"../../errors\";\n\nconst { HTTP_STATUS_UNAUTHORIZED } = constants;\n\nexport default class AuthChecker {\n  authService: AuthService;\n\n  constructor() {\n    this.authService = new AuthService();\n  }\n\n  public static async isAuthenticated(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const token = req.header(\"Authorization\");\n      if (token || !isEmpty(token)) {\n        const decoded: any = AuthService.verifyToken(token.split(\" \")[1]);\n        if (decoded) {\n          const { email, firstName, roles } = decoded.payload;\n          res.locals = { user: { email, firstName, roles } };\n          return next();\n        }\n      }\n      return res\n        .status(HTTP_STATUS_UNAUTHORIZED)\n        .json(\n          createErrorResponse(\n            { message: \"Please provide a valid token on header\" },\n            HTTP_STATUS_UNAUTHORIZED\n          )\n        );\n    } catch (e) {\n      return res.status(500).json(createErrorResponse(e));\n    }\n  }\n\n  public static checkAuthorization = (role: Role, roles: string[]) => {\n    try {\n      const isAuthorization = roles.find((permission) => {\n        console.log(\"Comparison: \", permission, role.toString());\n        return `${permission}` === role.toString();\n      });\n      if (isAuthorization) {\n        return true;\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n    return false;\n  };\n\n  public static isAuthorized =\n    (role: Role) => (_req: Request, res: Response, next: NextFunction) => {\n      try {\n        const { user } = res.locals;\n        const { roles } = user;\n\n        const isAuthorized = AuthChecker.checkAuthorization(role, roles);\n        if (isAuthorized) {\n          return next();\n        }\n        return res\n          .status(403)\n          .json(createErrorResponse({ message: \"Unauthorized\" }, 403));\n      } catch (e: any) {\n        logger.error(e);\n        return res.status(500).json(createErrorResponse(e, 500));\n      }\n    };\n}\n","import rateLimit from 'express-rate-limit';\r\n\r\nexport const mainLimiter = rateLimit({\r\n  windowMs: 10 * 60 * 1000,\r\n  max: 100,\r\n  message: {\r\n    status: 429,\r\n    message: 'Too Many Requests',\r\n  },\r\n});\r\n","import RoleModel from \"./roles\";\r\nimport UserModel from \"./users\";\r\n\r\nexport const User = UserModel;\r\nexport const Role = RoleModel;\r\n","import mongoose from \"mongoose\";\nimport { Role } from \"../../types\";\n\nexport const RoleSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      enum: Role,\n      default: Role.END_USER,\n    },\n    createdBy: String,\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.model(\"Role\", RoleSchema);\n","import { Schema, model } from \"mongoose\";\n\nimport { RoleSchema } from \"../roles\";\n\nconst UserSchema = new Schema({\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  firstName: {\n    type: String,\n    required: true,\n  },\n  lastName: {\n    type: String,\n    required: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  disabled: {\n    type: Boolean,\n    default: true,\n  },\n  verified: {\n    type: Boolean,\n    default: false,\n  },\n  emailVerifiedAt: {\n    type: Date,\n    default: undefined,\n  },\n  emailVerificationCode: String,\n  imageUrl: String,\n  salt: String,\n  roles: {\n    type: Array,\n    default: [],\n  },\n});\n\nexport default model(\"User\", UserSchema);\n","import express, { Router } from \"express\";\n\nimport { mainLimiter } from \"../../middleware/limiters\";\nimport AuthController from \"../../controllers/auth\";\nimport validators from \"../../tools/validators\";\nimport NewAccount from \"../../types/dto/registration\";\nimport Login from \"../../types/dto/login\";\n\nconst router: Router = express.Router();\n\nconst authController = new AuthController();\nrouter\n  .route(\"/register\")\n  .post([\n    mainLimiter,\n    validators.validateInput(NewAccount),\n    authController.registerNewUser,\n  ]);\nrouter\n  .route(\"/login\")\n  .post([\n    mainLimiter,\n    validators.validateInput(Login),\n    authController.loginUser,\n  ]);\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport Validators from \"../../tools/validators\";\nimport ContactForm from \"../../types/dto/contact/ContactForm\";\nimport ContactFormController from \"../../controllers/contact\";\n\nconst router = Router();\nconst controller = new ContactFormController();\n\nconst handler = (req: Request, res: Response) => {\n  res.json({\n    status: \"Route is live\",\n    url: req.url,\n  });\n};\nrouter\n  .route(\"/contact\")\n  .get(handler)\n  .post([\n    Validators.validateInput(ContactForm),\n    controller.sendContactFormSubmission,\n  ]);\n\nexport default router;\n","import { Router } from \"express\";\nimport authRoute from \"./auth\";\nimport userRoute from \"./user\";\nimport guestRoute from \"./guest\";\n\nconst router = Router();\n\nrouter.use(\"/auth\", authRoute);\nrouter.use(\"/user\", userRoute);\nrouter.use(\"/guest\", guestRoute);\n\nexport default router;\n","import express, { Router } from \"express\";\n\nimport { mainLimiter } from \"../../middleware/limiters\";\nimport AuthChecker from \"../../middleware/auth\";\nimport { Role } from \"../../types\";\nimport UserController from \"../../controllers/user\";\n\nconst router: Router = express.Router();\n\nrouter\n  .route(\"/\")\n  .get([\n    mainLimiter,\n    AuthChecker.isAuthenticated,\n    AuthChecker.isAuthorized(Role.END_USER),\n    AuthChecker.isAuthorized(Role.ADMIN),\n    UserController.getUsers,\n  ]);\n\nexport default router;\n","import { faker } from \"@faker-js/faker\";\nimport { Role, User } from \"../models\";\nimport logger from \"../config/logger.config\";\nimport AuthService from \"../services/auth/tools\";\nimport { Role as ERole } from \"../types\";\n\nconst roleList = [ERole.ADMIN, ERole.END_USER, ERole.SUPER_ADMIN];\nconst authService = new AuthService();\nexport const seedRoles = async () => {\n  try {\n    const roles = await Role.find({});\n    if (roles.length === 0) {\n      const roleArr = roleList.map((role: ERole) => {\n        const temp = new Role();\n        temp.name = role.toString();\n        temp.createdBy = \"GodzillaJim\";\n        return temp;\n      });\n      await Role.bulkSave(roleArr);\n    }\n  } catch (error) {\n    logger.error(error);\n  }\n};\n\nexport const seedAdmin = async () => {\n  try {\n    const superAdmin = await User.findOne({\n      email: \"superadmin@collaborate.com\",\n    });\n    if (!superAdmin) {\n      const user = new User();\n      const { salt, hash } = authService.encryptPassword(\"password123\");\n      user.email = \"superadmin@collaborate.com\";\n      user.firstName = faker.name.firstName();\n      user.lastName = faker.name.lastName();\n      user.password = hash;\n      user.salt = salt;\n      user.imageUrl = faker.image.avatar();\n      user.disabled = false;\n      user.verified = true;\n      user.emailVerifiedAt = new Date();\n      user.emailVerificationCode = faker.word.noun(6);\n      user.roles = await Role.find({});\n      await user.save();\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n};\n","import User from \"../../models/users\";\n\nexport default class UserService {\n  public static async getAllUsers(): Promise<typeof User[]> {\n    return User.find();\n  }\n}\n","import createHttpError from \"http-errors\";\nimport NewAccount from \"../../../types/dto/registration\";\nimport { User } from \"../../../models\";\nimport AuthService from \"../tools\";\nimport Login from \"../../../types/dto/login\";\n\nclass Account {\n  authService: AuthService;\n\n  constructor() {\n    this.authService = new AuthService();\n  }\n\n  public async registerNewAccount(account: NewAccount) {\n    const user = await User.findOne({ email: account.email });\n    if (user) {\n      throw new createHttpError.BadRequest(\"This email is already registered.\");\n    }\n    const { salt, hash } = this.authService.encryptPassword(account.password);\n    const newUser = new User();\n    newUser.email = account.email;\n    newUser.firstName = account.firstName;\n    newUser.lastName = account.lastName;\n    newUser.password = hash;\n    newUser.salt = salt;\n    newUser.roles = await this.authService.getDefaultRoles();\n    await newUser.save();\n    return { success: true, message: \"Account created successfully!\" };\n  }\n\n  public async loginUser({ email, password }: Login) {\n    const user: any = await User.findOne({ email });\n    if (!user) {\n      const error = new createHttpError.BadRequest(\n        \"This person does not exist!\"\n      );\n      error.status = 400;\n      throw error;\n    }\n    const isPassValid = this.authService.validatePassword(\n      password,\n      user.password,\n      user.salt\n    );\n    if (!isPassValid) {\n      const error = new createHttpError.BadRequest(\n        \"Wrong username or password!\"\n      );\n      error.status = 400;\n      throw error;\n    }\n\n    console.log(\"Accounts.User.Roles\", user.roles);\n    return this.authService.generateJwtToken({\n      email,\n      firstName: user.firstName,\n      roles: user.roles.map(({ name }: { name: string }) => name),\n    });\n  }\n}\nexport default Account;\n","import crypto from \"crypto\";\nimport { isEqual } from \"lodash\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../../../config\";\nimport Role from \"../../../models/roles\";\n\nexport default class AuthService {\n  private readonly salt: string;\n\n  secret: string;\n\n  expiration: string | number;\n\n  private readonly defaultRole: string[];\n\n  constructor() {\n    this.salt = crypto.randomBytes(16).toString(\"hex\");\n    this.defaultRole = [\"endUser\"];\n    this.secret = config.jwt.secret;\n    this.expiration = config.jwt.expiration;\n  }\n\n  public static verifyToken(token: string) {\n    try {\n      return jwt.verify(token, config.jwt.secret, { complete: true });\n    } catch (e) {\n      console.log(e);\n      return null;\n    }\n  }\n\n  public async getDefaultRoles() {\n    return await Role.find({ name: this.defaultRole });\n  }\n\n  public encryptPassword(password: string): {\n    salt: string;\n    hash: string;\n  } {\n    const hash = crypto\n      .pbkdf2Sync(password, this.salt, 1000, 64, \"sha1\")\n      .toString(\"hex\");\n    return { salt: this.salt, hash };\n  }\n\n  public validatePassword(\n    password: string,\n    hash: string,\n    salt: string\n  ): boolean {\n    const candidateHash = crypto\n      .pbkdf2Sync(password, salt, 1000, 64, \"sha1\")\n      .toString(\"hex\");\n    return isEqual(candidateHash, hash);\n  }\n\n  public generateJwtToken({\n    email,\n    firstName,\n    roles,\n  }: {\n    email: string;\n    firstName: string;\n    roles: any;\n  }): {\n    token: string;\n    expiresIn: string | number;\n  } {\n    const token = jwt.sign({ email, firstName, roles }, this.secret, {\n      expiresIn: this.expiration,\n    });\n    return { token, expiresIn: this.expiration };\n  }\n}\n","import { IContactForm } from \"../../types\";\nimport logger from \"../../config/logger.config\";\nimport KafkaProducerService from \"../kafka\";\n\nexport default class ContactFormService {\n  TOPIC = \"collaborate_contact_form_messages\";\n\n  public async submitContactForm(form: IContactForm) {\n    try {\n      const producerService = new KafkaProducerService();\n      await producerService.produceMessage(this.TOPIC, form);\n    } catch (error) {\n      logger.error(error);\n    }\n  }\n}\n","import { Message, Producer } from \"kafkajs\";\nimport { boundClass } from \"autobind-decorator\";\nimport { IContactForm } from \"../../types\";\nimport logger from \"../../config/logger.config\";\nimport { producer } from \"../../tools/kafka\";\n\n@boundClass\nexport default class KafkaProducerService {\n  producer: Producer;\n\n  constructor() {\n    this.producer = producer;\n  }\n\n  public async produceMessage(topic: string, message: any) {\n    try {\n      await this.producer.connect();\n      await this.producer.send({\n        topic,\n        messages: [{ value: JSON.stringify(message) }],\n      });\n    } catch (error) {\n      logger.error(error);\n    }\n  }\n}\n","import { Kafka } from \"kafkajs\";\nimport dotenv from \"dotenv\";\nimport config from \"../../config\";\n\ndotenv.config();\nconst { clientId, bootstrapServerHost } = config.kafka;\nconst kafka = new Kafka({\n  clientId,\n  brokers: [bootstrapServerHost],\n});\n\nexport const producer = kafka.producer();\nexport const consumer = kafka.consumer({ groupId: \"collabor@te\" });\nexport default kafka;\n","import { isEmpty } from \"lodash\";\nimport { boundClass } from \"autobind-decorator\";\nimport { NextFunction, Response, Request } from \"express\";\nimport {\n  ClassConstructor,\n  plainToClass,\n  plainToInstance\n} from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { IContactForm } from \"../../types\";\nimport logger from \"../../config/logger.config\";\nimport ContactForm from \"../../types/dto/contact/ContactForm\";\n\n// Arr@w05GodbyChinu@Achebe\n\n@boundClass\nclass Validators {\n  public static validateForm(form: IContactForm) {\n    const definedFields =\n      form.name && form.email && form.message && form.subject;\n    const nonEmptyFields =\n      isEmpty(form) ||\n      isEmpty(form.name) ||\n      isEmpty(form.message) ||\n      isEmpty(form.subject) ||\n      isEmpty(form.email);\n    if (Boolean(definedFields) && !nonEmptyFields) {\n      return true;\n    }\n    return false;\n  }\n\n  public static validateInput(dtoClass: ClassConstructor<any>) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const output = plainToInstance(dtoClass, req.body);\n      validate(output, req.body, {\n        skipMissingProperties: true,\n        stopAtFirstError: true,\n      }).then((errors) => {\n        if (errors.length > 0) {\n          logger.error(errors);\n          const errorTexts: { [type: string]: string }[] = [];\n          errors.forEach((err) => {\n            errorTexts.push(err.constraints);\n          });\n          return res.status(400).json({ error: true, data: errorTexts });\n        }\n        req.body = output;\n        return next();\n      });\n    };\n  }\n}\nexport default Validators;\n","import { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport default class ContactForm {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  name: string;\n\n  @IsNotEmpty()\n  subject: string;\n\n  @IsNotEmpty()\n  message: string;\n\n  constructor(email: string, name: string, subject: string, message: string) {\n    this.email = email;\n    this.name = name;\n    this.subject = subject;\n    this.message = message;\n  }\n}\n","import { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport default class Login {\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n","import { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport default class NewAccount {\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n","export enum Role {\n  END_USER = 0,\n  ADMIN = 1,\n  SUPER_ADMIN = 2,\n}\nexport interface IUser {\n  email: string;\n  firstName: string;\n  lastName: string;\n  password: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  disabled: Date;\n  verified: boolean;\n  emailVerfiedAt: Date;\n  emailVertificationCode: string;\n  roles: Role[];\n}\n\nexport interface IContactForm {\n  email: string;\n  name: string;\n  subject: string;\n  message: string;\n}\n","module.exports = require(\"@faker-js/faker\");","module.exports = require(\"autobind-decorator\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-rate-limit\");","module.exports = require(\"helmet\");","module.exports = require(\"http-errors\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"kafkajs\");","module.exports = require(\"lodash\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"winston\");","module.exports = require(\"crypto\");","module.exports = require(\"http2\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["config","app","middleware","morganConfig","corsOptionsWhiteList","json","urlencoded","extended","use","corsOptions","allowedHeaders","credentials","methods","preflightContinue","request","callback","origin","header","some","host","includes","Error","tokens","req","res","log","method","url","status","join","info","mailer","process","env","MAIL_HOST","port","parseInt","MAIL_PORT","auth","user","MAIL_USERNAME","pass","MAIL_PASSWORD","kafka","bootstrapServerHost","KAFKA_BOOTSTRAP_SERVER","KAFKA_PORT","clientId","KAFKA_CLIENT_ID","jwt","secret","JWT_SECRET","expiration","JWT_EXPIRATION","logger","createLogger","level","format","combine","simple","timestamp","printf","message","defaultMeta","service","transports","File","filename","connect","MONGO_DB","servername","then","catch","error","this","accountService","registerNewUser","next","newUser","body","registerNewAccount","success","data","loginUser","tokenInfo","boundClass","AuthController","name","contactService","sendContactFormSubmission","_res","form","submitContactForm","ContactFormController","getUsers","_req","getAllUsers","users","NotFound","BadRequest","Unauthorized","Forbidden","statusCode","PORT","listen","console","seedRoles","seedAdmin","HTTP_STATUS_UNAUTHORIZED","constants","authService","isAuthenticated","token","isEmpty","decoded","verifyToken","split","payload","email","firstName","roles","locals","e","checkAuthorization","role","find","permission","toString","isAuthorized","AuthChecker","mainLimiter","windowMs","max","User","Role","RoleSchema","Schema","type","String","enum","default","END_USER","createdBy","timestamps","model","UserSchema","unique","required","lastName","password","disabled","Boolean","verified","emailVerifiedAt","Date","undefined","emailVerificationCode","imageUrl","salt","Array","router","Router","authController","route","post","validateInput","controller","get","ADMIN","roleList","SUPER_ADMIN","length","roleArr","map","temp","bulkSave","findOne","encryptPassword","hash","faker","image","avatar","word","noun","save","account","getDefaultRoles","validatePassword","generateJwtToken","Account","randomBytes","defaultRole","verify","complete","pbkdf2Sync","candidateHash","isEqual","sign","expiresIn","TOPIC","produceMessage","producer","topic","send","messages","value","JSON","stringify","KafkaProducerService","Kafka","brokers","consumer","groupId","validateForm","definedFields","subject","nonEmptyFields","dtoClass","output","plainToInstance","validate","skipMissingProperties","stopAtFirstError","errors","forEach","err","push","constraints","Validators","IsEmail","IsNotEmpty","ContactForm","Login","NewAccount","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}